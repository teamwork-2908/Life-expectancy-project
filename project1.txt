import pandas as pd
df=pd.read_csv('E:\projects\Expectancy.csv')
df

df.head(10)

df.tail(10)

df[2000:2501]

df[:2500]

df[2000:]

df[['Alcohol']]

df[['Year','Status','Country']]

df[2000:2001]

df.shape

df['Year'].unique()

df.info()

df.describe()

df.dtypes

df[['Alcohol','Polio','Status']].shape

df.isnull()

df.isnull().sum()

df['Alcohol'].sum()

df['GDP'].sum()

df['GDP'].count()

df['Alcohol'].max()

df['Alcohol'].min()

sorted_df=df.sort_index(ascending="true")
sorted_df


df.sort_values(by=['Alcohol','GDP'])

cleaneddf=df.dropna()
cleaneddf

cleaneddf.shape


# EDA (or)data visuvalization

import matplotlib.pyplot as plt

# model buliding 

cleaneddf.columns

x=cleaneddf[[ 'Status','Year', 'Adult Mortality',
       'infant deaths', 'Alcohol', 'percentage expenditure', 'Hepatitis B',
       'Measles ', ' BMI ', 'under-five deaths ', 'Polio', 'Total expenditure',
       'Diphtheria ', ' HIV/AIDS', 'GDP', 'Population',
       ' thinness  1-19 years', ' thinness 5-9 years',
       'Income composition of resources', 'Schooling']].values
x  

x.shape

cleaneddf.dtypes

cleaneddf['Life expectancy']

cleaneddf.shape

y

df.columns

cleaneddf.columns=[['Country', 'Year', 'Status', 'Expectancy', 'Adult Mortality',
       'infant deaths', 'Alcohol', 'percentage expenditure', 'Hepatitis B',
       'measles ', ' Bmi ', 'underfivedeaths ', 'Polio', 'Total expenditure',
       'Diphtheria ', ' HIV/AIDS', 'GDP', 'Population',
       ' thinness  1-19 years', ' thinness5to9years',
       'Income composition of resources', 'Schooling']]
cleaneddf

list(cleaneddf.columns.values)

y=cleaneddf[['Expectancy']].values
y

y

x=cleaneddf[[ 'Status','Year', 'Adult Mortality',
       'infant deaths', 'Alcohol', 'percentage expenditure', 'Hepatitis B',
       'Measles ', ' BMI ', 'under-five deaths ', 'Polio', 'Total expenditure',
       'Diphtheria ', ' HIV/AIDS', 'GDP', 'Population',
       ' thinness  1-19 years', ' thinness 5-9 years',
       'Income composition of resources', 'Schooling']].values
x  

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=100)
x_train,x_test,y_train,y_test

x_train.shape,y_train.shape

x_test.shape,y_test.shape

cleaneddf.shape

# Label encoding for status column(using sklearn package)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['Status']=le.fit_transform(df['Status'])
df


# Buliding an ml model

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=100)
x_train,x_test,y_train,y_test

cleaneddf=df.dropna()
cleaneddf

cleaneddf[150:200]

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=100)
x_train,x_test,y_train,y_test

from sklearn.linear_model import LinearRegression
lg=LinearRegression()
lg.fit(x_train,y_train)

lg.intercept_

lg.coef_

lg.coef_.shape

y_pred = lg.predict(x_test)
y_pred

lg.score(x_test,y_test)

from sklearn.metrics import mean_squared_error
error=mean_squared_error(y_pred,y_test)
error

from sklearn.metrics import mean_squared_error
import numpy as np
error1=np.sqrt(mean_squared_error(y_pred,y_test))
error1

from sklearn.metrics import mean_absolute_error
error2=mean_absolute_error(y_pred,y_test)
error2

  import numpy as nop
acc= np.mean(np.abs((y_test -y_pred) /y_test)) * 100
acc

lg.predict([[0,2019,678,440,190.89,71.00,56,345,50.9,78,7,9,67,0.1,590,3000,17,19.3,0.56,1.90]])









